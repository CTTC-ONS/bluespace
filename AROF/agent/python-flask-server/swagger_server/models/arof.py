# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Arof(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, arof_id: int=None, enabled: bool=None, wavelength: int=None):  # noqa: E501
        """Arof - a model defined in Swagger

        :param arof_id: The arof_id of this Arof.  # noqa: E501
        :type arof_id: int
        :param enabled: The enabled of this Arof.  # noqa: E501
        :type enabled: bool
        :param wavelength: The wavelength of this Arof.  # noqa: E501
        :type wavelength: int
        """
        self.swagger_types = {
            'arof_id': int,
            'enabled': bool,
            'wavelength': int
        }

        self.attribute_map = {
            'arof_id': 'arof-id',
            'enabled': 'enabled',
            'wavelength': 'wavelength'
        }

        self._arof_id = arof_id
        self._enabled = enabled
        self._wavelength = wavelength

    @classmethod
    def from_dict(cls, dikt) -> 'Arof':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The arof of this Arof.  # noqa: E501
        :rtype: Arof
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arof_id(self) -> int:
        """Gets the arof_id of this Arof.


        :return: The arof_id of this Arof.
        :rtype: int
        """
        return self._arof_id

    @arof_id.setter
    def arof_id(self, arof_id: int):
        """Sets the arof_id of this Arof.


        :param arof_id: The arof_id of this Arof.
        :type arof_id: int
        """

        self._arof_id = arof_id

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this Arof.


        :return: The enabled of this Arof.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this Arof.


        :param enabled: The enabled of this Arof.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def wavelength(self) -> int:
        """Gets the wavelength of this Arof.


        :return: The wavelength of this Arof.
        :rtype: int
        """
        return self._wavelength

    @wavelength.setter
    def wavelength(self, wavelength: int):
        """Sets the wavelength of this Arof.


        :param wavelength: The wavelength of this Arof.
        :type wavelength: int
        """

        self._wavelength = wavelength
