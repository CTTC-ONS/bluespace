# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FrequencyConstraint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, adjustment_granularity: str=None, grid_type: str=None):  # noqa: E501
        """FrequencyConstraint - a model defined in Swagger

        :param adjustment_granularity: The adjustment_granularity of this FrequencyConstraint.  # noqa: E501
        :type adjustment_granularity: str
        :param grid_type: The grid_type of this FrequencyConstraint.  # noqa: E501
        :type grid_type: str
        """
        self.swagger_types = {
            'adjustment_granularity': str,
            'grid_type': str
        }

        self.attribute_map = {
            'adjustment_granularity': 'adjustment-granularity',
            'grid_type': 'grid-type'
        }

        self._adjustment_granularity = adjustment_granularity
        self._grid_type = grid_type

    @classmethod
    def from_dict(cls, dikt) -> 'FrequencyConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The frequency-constraint of this FrequencyConstraint.  # noqa: E501
        :rtype: FrequencyConstraint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment_granularity(self) -> str:
        """Gets the adjustment_granularity of this FrequencyConstraint.


        :return: The adjustment_granularity of this FrequencyConstraint.
        :rtype: str
        """
        return self._adjustment_granularity

    @adjustment_granularity.setter
    def adjustment_granularity(self, adjustment_granularity: str):
        """Sets the adjustment_granularity of this FrequencyConstraint.


        :param adjustment_granularity: The adjustment_granularity of this FrequencyConstraint.
        :type adjustment_granularity: str
        """

        self._adjustment_granularity = adjustment_granularity

    @property
    def grid_type(self) -> str:
        """Gets the grid_type of this FrequencyConstraint.


        :return: The grid_type of this FrequencyConstraint.
        :rtype: str
        """
        return self._grid_type

    @grid_type.setter
    def grid_type(self, grid_type: str):
        """Sets the grid_type of this FrequencyConstraint.


        :param grid_type: The grid_type of this FrequencyConstraint.
        :type grid_type: str
        """

        self._grid_type = grid_type
